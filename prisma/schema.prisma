// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Hospital {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Specialist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  doctors Doctor[]
}

model Doctor {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  degree    String
  startedAt DateTime?
  biography String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  specialistId String
  specialist   Specialist @relation(fields: [specialistId], references: [id])

  appointments Appointment[]
}

model Topic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Appointment {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  status           AppointmentStatus @default(ACTIVE)
  consultationType ConsultationType  @default(VOICE)
  reason           String
  from             DateTime
  to               DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])
}

model Region {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  patients Patient[]
}

model Patient {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phone       String    @unique
  password    String
  dateOfBirth DateTime?
  gender      Gender
  regionId    String?
  region      Region?   @relation(fields: [regionId], references: [id])
  city        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  appointments Appointment[]
}

enum AppointmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ConsultationType {
  VOICE
  VIDEO
}

enum Gender {
  MALE
  FEMALE
}
